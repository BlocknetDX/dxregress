// Copyright Â© 2017 The Blocknet Developers
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cmd

import (
	"context"
	"encoding/base64"
	"fmt"
	"runtime"
	"sync"

	"github.com/BlocknetDX/dxregress/containers"
	"github.com/docker/docker/api/types"
	"github.com/docker/docker/client"
	"github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

const localenvPrefix = "dxregress-localenv-"
const genesisPatchFile = "dxregress.patch"
const dockerFilePath = "Dockerfile-dxregress"
const containerImage = "blocknetdx/dxregress:localenv"

// localenvCmd represents the localenv command
var localenvCmd = &cobra.Command{
	Use:   "localenv",
	Short: "Create a test environment from a local codebase",
	Long: ``,
	PersistentPreRun: func(cmd *cobra.Command, args []string) {
		if !containers.IsDockerInstalledAndRunning() {
			stop()
			return
		}
	},
	Run: func(cmd *cobra.Command, args []string) {

	},
}

// init adds the localenv cmd to the root command
func init() {
	RootCmd.AddCommand(localenvCmd)
}

// localEnvContainerFilter returns the regex filter for the localenv containers.
func localEnvContainerFilter() string {
	return fmt.Sprintf(`^/%s[^\s]+$`, localenvPrefix)
}

// stopAllLocalEnvContainers stops the existing localenv containers.
func stopAllLocalEnvContainers(ctx context.Context, docker *client.Client, suppressLogs bool) error {
	containerList, err := containers.FindContainers(docker, localEnvContainerFilter())
	if err != nil {
		return err
	}
	if len(containerList) == 0 {
		logrus.Info("No localenv containers")
		return nil
	}

	// Stop containers in parallel
	wg := new(sync.WaitGroup)
	for _, c := range containerList {
		wg.Add(1)
		go func(c types.Container) {
			name := c.Names[0]
			if !suppressLogs {
				logrus.Infof("Removing localenv container %s, please wait...", name)
			}
			if err := containers.StopAndRemove(ctx, docker, c.ID); err != nil {
				logrus.Errorf("Failed to remove %s: %s", name, err.Error())
			} else if !suppressLogs {
				logrus.Infof("Removed %s", name)
			}
			wg.Done()
		}(c)
	}

	waitChan := make(chan bool, 1)
	go func() {
		wg.Wait()
		waitChan <- true
	}()

	select {
	case <-ctx.Done():
		return ctx.Err()
	case <-waitChan:
	}

	return nil
}

// dockerFile returns the docker file.
func dockerFile() string {
	return `FROM ubuntu:trusty

ARG cores=`+fmt.Sprintf("%d", runtime.NumCPU())+`
ENV ecores=$cores

RUN apt update \
  && apt install -y --no-install-recommends \
     software-properties-common \
     ca-certificates \
     wget curl git python vim \
  && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN add-apt-repository ppa:bitcoin/bitcoin \
  && apt update \
  && apt install -y --no-install-recommends \
     build-essential libtool autotools-dev bsdmainutils \
     libevent-dev autoconf automake pkg-config libssl-dev \
     libboost-system-dev libboost-filesystem-dev libboost-chrono-dev \
     libboost-program-options-dev libboost-test-dev libboost-thread-dev \
     libdb4.8-dev libdb4.8++-dev libgmp-dev libminiupnpc-dev libzmq3-dev \
  && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Build berkeleydb4.8
RUN mkdir -p /tmp/berkeley \
  && cd /tmp/berkeley \
  && wget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz' \
  && [ "$(printf '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef db-4.8.30.NC.tar.gz' | sha256sum -c)" = "db-4.8.30.NC.tar.gz: OK" ] || $(echo "Berkeley DB 4.8 sha256sum failed"; exit 1) \
  && tar -xzvf db-4.8.30.NC.tar.gz \
  && cd db-4.8.30.NC/build_unix/ \
  && ../dist/configure --enable-cxx --disable-shared --with-pic --prefix=/tmp/berkeley \
  && make install

COPY ./ /opt/blocknetdx/BlockDX/

# Build source
RUN mkdir -p /opt/blockchain/config \
  && mkdir -p /opt/blockchain/dxregress \
  && ln -s /opt/blockchain/config /root/.blocknetdx \
  && cd /opt/blocknetdx/BlockDX \
  && chmod +x ./autogen.sh \
  && ./autogen.sh \
  && ./configure LDFLAGS="-L/tmp/berkeley/lib/" CPPFLAGS="-I/tmp/berkeley/include/" --without-gui --enable-debug --enable-tests=0 \
  && make clean \
  && make -j$ecores \
  && make install \
  && rm -rf /opt/blocknetdx/ /tmp/berkeley/*

# Write default blocknetdx.conf (can be overridden on commandline)
RUN echo "datadir=/opt/blockchain/dxregress \n\
                                            \n\
testnet=1                                   \n\
dbcache=256                                 \n\
maxmempool=512                              \n\
                                            \n\
port=41476                                  \n\
rpcport=41419                               \n\
                                            \n\
listen=1                                    \n\
server=1                                    \n\
maxconnections=10                           \n\
logtimestamps=1                             \n\
logips=1                                    \n\
                                            \n\
rpcuser=localenv                            \n\
rpcpassword=test                            \n\
rpcallowip=0.0.0.0/0                        \n\
rpctimeout=15                               \n\
rpcclienttimeout=15" > /opt/blockchain/config/blocknetdx.conf

WORKDIR /opt/blockchain/
VOLUME ["/opt/blockchain/config", "/opt/blockchain/dxregress"]

# Testnet Port, RPC, GDB Remote Debug
EXPOSE 41476 41419 41475

ENTRYPOINT ["/bin/sh", "-c"]
CMD ["blocknetdxd", "-daemon=0", "-testnet=1", "-conf=/root/.blocknetdx/blocknetdx.conf"]
`
}

// genesisPatch contains the patch for enabling the new test environment blockchain.
func genesisPatch() string {
	patch := ``
	result, err := base64.StdEncoding.DecodeString(patch)
	if err != nil {
		logrus.Error("Failed to decode patch:", err)
	}
	return string(result)
}

// dxregressContainerName returns a valid dxregress container name.
func dxregressContainerName(name string) string {
	return localenvPrefix + name
}